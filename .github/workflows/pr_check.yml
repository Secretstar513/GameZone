name: Pull Request Validation

on:
  pull_request_target:
    types:
      - opened
      - synchronize

jobs:
  pr-validation:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install --prefix .github octokit

      - name: Validate pull request
        id: validate_pr
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const repoOwner = context.payload.repository.owner.login;
            const repoName = context.payload.repository.name;

            const { data: pr } = await github.pulls.get({
              owner: repoOwner,
              repo: repoName,
              pull_number: prNumber,
              per_page: 100, // Increase the number of files per page to fetch more files
            });

            // Get all the changed files in the PR
            const files = pr.files;

            // Check for required changes in the PR
            const changes = [];

            // Check if a new folder is created inside the "Games" folder and contains a new file
            const gamesFolderPath = 'Games/';
            const newFolderRegex = new RegExp(`${gamesFolderPath}([^/]+)/.*$`);
            const newFolderCreated = files.some(file => newFolderRegex.test(file.filename));

            // Check if a README.md file is added in the newly created folder
            const readmeRegex = new RegExp(`${gamesFolderPath}([^/]+)/README.md$`);
            const readmeAdded = files.some(file => readmeRegex.test(file.filename));

            // Comment with the required changes, if any
            if (!newFolderCreated) {
              changes.push('- Please create a new folder inside the "Games" folder.');
            }
            if (!readmeAdded) {
              changes.push('- Please add a README.md file inside the newly created folder.');
            }

            // Check if the main README.md file is modified
            const mainReadmeModified = files.some(file => file.filename.toLowerCase() === 'readme.md');

            if (!mainReadmeModified) {
              changes.push('- Please modify the main README.md file.');
            }

            // Check if an image is added to the assets/images directory
            const imageAdded = files.some(file => file.filename.startsWith('assets/images/'));

            if (!imageAdded) {
              changes.push('- Please add an image to the assets/images directory.');
            }

            if (changes.length > 0) {
              const comment = [
                `Hello @${pr.user.login},`,
                `You need to make the following changes:`,
                ...changes.map(change => `  ${change}`),
                '',
                'Hoping that you will make those changes soon ðŸš€'
              ].join('\n');

              // Comment on the pull request
              await github.pulls.createReview({
                owner: repoOwner,
                repo: repoName,
                pull_number: prNumber,
                event: 'REQUEST_CHANGES',
                body: comment
              });

              // Add labels to the pull request
              await github.issues.addLabels({
                owner: repoOwner,
                repo: repoName,
                issue_number: prNumber,
                labels: ['changes requested', 'pending']
              });

              console.log(`Commented on pull request #${prNumber} with required changes.`);
            } else {
              const existingLabels = pr.labels.map(label => label.name.toLowerCase());

              if (existingLabels.includes('changes requested') || existingLabels.includes('pending')) {
                // Remove the "changes requested" and "pending" labels
                await github.issues.removeLabel({
                  owner: repoOwner,
                  repo: repoName,
                  issue_number: prNumber,
                  name: 'changes requested'
                });
                await github.issues.removeLabel({
                  owner: repoOwner,
                  repo: repoName,
                  issue_number: prNumber,
                  name: 'pending'
                });

                // Approve the changes
                await github.pulls.createReview({
                  owner: repoOwner,
                  repo: repoName,
                  pull_number: prNumber,
                  event: 'APPROVE'
                });

                // Add the "under review" label
                await github.issues.addLabels({
                  owner: repoOwner,
                  repo: repoName,
                  issue_number: prNumber,
                  labels: ['under review']
                });

                console.log(`Updated pull request #${prNumber} with approved changes.`);
              } else {
                // Add label to the pull request
                await github.issues.addLabels({
                  owner: repoOwner,
                  repo: repoName,
                  issue_number: prNumber,
                  labels: ['under review']
                });

                console.log(`Pull request #${prNumber} is valid and meets the requirements.`);
              }
            }
